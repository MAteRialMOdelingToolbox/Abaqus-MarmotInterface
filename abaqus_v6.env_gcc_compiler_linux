import os

constitutiveRootPath = os.path.expanduser('~/constitutiveModelling')

ask_delete=OFF

fortCmd = "gfortran"
cppCmd  = "g++"     

compile_fortran = (fortCmd + ' -c -fPIC -I%I')

compile_cpp = [cppCmd,
               '-c', '-fPIC', '-w', '-Wno-deprecated', '-DTYPENAME=typename',
               '-D_LINUX_SOURCE', '-DABQ_LINUX', '-DABQ_LNX86_64', '-DSMA_GNUC',
               '-DFOR_TRAIL', '-DHAS_BOOL', '-DASSERT_ENABLED',
               '-D_BSD_TYPES', '-D_BSD_SOURCE', '-D_GNU_SOURCE',
               '-D_POSIX_SOURCE', '-D_XOPEN_SOURCE_EXTENDED', '-D_XOPEN_SOURCE',
               '-DHAVE_OPENGL', '-DHKS_OPEN_GL',  '-DGL_GLEXT_PROTOTYPES',
               '-DMULTI_THREADING_ENABLED', '-D_REENTRANT',
               '-DABQ_MPI_SUPPORT', '-DBIT64', '-D_LARGEFILE64_SOURCE', '-D_FILE_OFFSET_BITS=64',
               #mpiCppImpl,
               # '-O0', # <-- Optimization level
               # '-g',  # <-- Debug symbols
               '-I%I']

compile_fmu = [cppCmd,
               '-c', '-fPIC','-I%I']

link_fmu = [cppCmd,
            '-fPIC', '-shared', '-o', '%J', '%M']

link_sl = (fortCmd +
       " -fPIC -shared " +
       "%E -Wl,-soname,%U -o %U %F %A %L %B -Wl,-Bdynamic " +
       " -lifport -lifcoremt")
link_sl = link_sl.split(" ")

link_exe = [cppCmd,
            '-fPIC',
            '-Wl,-Bdynamic', '-o', '%J', '%F', '%M', '%L', '%B', '%O', '-lpthread', '-lm', '-lifcoremt']

del fortCmd
del cppCmd

cppAdds = [ '-std=c++11', '-I'+os.path.join(constitutiveRootPath, 'bftUserLibrary', 'include')]
linkAdds = ['-L'+os.path.join(constitutiveRootPath, 'bftUserLibrary', 'lib'),'-Wl,-rpath,'+os.path.join(constitutiveRootPath, 'bftUserLibrary', 'lib'), '-lbftUserLibrary']

compile_cpp = compile_cpp + cppAdds  
link_sl=link_sl + linkAdds
link_exe = link_exe + linkAdds

del cppAdds
del linkAdds
del constitutiveRootPath
